import tkinter as tk
from tkinter import messagebox, simpledialog, ttk
import json
import os

# ---------- Funciones para guardar y cargar ----------
def cargar_base_datos(archivo):
    if os.path.exists(archivo):
        with open(archivo, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        return {
            "león": ["sí","sí","sí","sí","no","sí","no"],
            "tigre": ["sí","sí","sí","sí","no","sí","no"],
            "elefante": ["sí","sí","sí","no","no","sí","no"],
            "jirafa": ["sí","sí","sí","no","no","sí","no"],
            "cebra": ["sí","sí","sí","no","no","sí","no"],
            "perro": ["sí","sí","no","sí","sí","sí","no"],
            "gato": ["sí","sí","no","sí","sí","sí","0"],
            "vaca": ["sí","sí","sí","0","sí","sí","0"],
            "caballo": ["sí","sí","sí","0","sí","sí","0"],
            "cerdo": ["sí","sí","0","0","sí","sí","0"],
            "mono": ["sí","sí","0","0","0","sí","0"],
            "humano": ["sí","sí","0","0","sí","sí","0"],
            "delfín": ["sí","0","0","sí","0","sí","0"],
            "ballena": ["sí","0","sí","0","0","sí","0"],
            "murciélago": ["sí","sí","0","sí","0","sí","sí"],
            "águila": ["no","sí","0","sí","0","0","sí"],
            "gallina": ["no","sí","0","0","sí","0","sí"],
            "pato": ["no","sí","0","0","sí","0","sí"],
            "pingüino": ["no","sí","0","sí","0","0","0"],
            "loro": ["no","sí","0","0","sí","0","sí"],
            "búho": ["no","sí","0","sí","0","0","sí"],
            "avestruz": ["no","sí","sí","0","0","0","0"],
            "tiburón": ["no","0","sí","sí","0","0","0"],
            "pez dorado": ["no","0","0","0","sí","0","0"],
            "pez payaso": ["no","0","0","0","0","0","0"],
            "mantarraya": ["no","0","sí","0","0","0","0"],
            "tortuga": ["no","sí","0","0","0","0","0"],
            "cocodrilo": ["no","sí","sí","sí","0","0","0"],
            "serpiente": ["no","sí","0","sí","0","0","0"],
            "rana": ["no","sí","0","0","0","0","0"],
            "sapo": ["no","sí","0","0","0","0","0"],
            "zorra": ["sí","sí","0","sí","0","sí","0"],
            "lobo": ["sí","sí","sí","sí","0","sí","0"],
            "oso": ["sí","sí","sí","sí","0","sí","0"],
            "cabra": ["sí","sí","0","0","sí","sí","0"],
            "oveja": ["sí","sí","0","0","sí","sí","0"],
            "ardilla": ["sí","sí","0","0","0","sí","0"],
            "conejo": ["sí","sí","0","0","sí","sí","0"],
            "ratón": ["sí","sí","0","0","0","sí","0"]
        }

def guardar_base_datos(archivo, datos):
    with open(archivo, "w", encoding="utf-8") as f:
        json.dump(datos, f, ensure_ascii=False, indent=4)

# ---------- Clase principal ----------
class AkinatorAnimales:
    def __init__(self, root):
        self.root = root
        self.root.title("Akinator de Animales")
        self.root.geometry("520x460")
        self.root.resizable(False, False)
        self.root.configure(bg="#f0f4f8")

        self.archivo = "animales.json"
        self.animales = cargar_base_datos(self.archivo)

        self.preguntas = [
            "¿Es mamífero?",
            "¿Es terrestre?",
            "¿Es más grande que un perro?",
            "¿Es carnívoro?",
            "¿Es doméstico?",
            "¿Tiene pelo o pelaje?",
            "¿Vuela o puede volar?"
        ]
        self.respuestas = []
        self.indice_pregunta = 0

        # ---- Interfaz ----
        self.frame = tk.Frame(self.root, bg="#f0f4f8")
        self.frame.pack(expand=True)

        self.titulo = tk.Label(
            self.frame, text="Akinator de Animales", 
            font=("Arial", 20, "bold"), bg="#f0f4f8", fg="#2c3e50"
        )
        self.titulo.pack(pady=15)

        self.label_pregunta = tk.Label(
            self.frame, text="Piensa en un animal...",
            font=("Arial", 14), bg="#f0f4f8", fg="#34495e", wraplength=480
        )
        self.label_pregunta.pack(pady=15)

        # Barra de progreso
        self.barra_progreso = ttk.Progressbar(
            self.frame, length=450, mode='determinate', maximum=len(self.preguntas)
        )
        self.barra_progreso.pack(pady=10)

        self.label_progreso = tk.Label(
            self.frame, text="", font=("Arial", 12, "italic"),
            bg="#f0f4f8", fg="#7f8c8d"
        )
        self.label_progreso.pack()

        self.frame_botones = tk.Frame(self.frame, bg="#f0f4f8")
        self.frame_botones.pack(pady=20)

        estilo_boton = {"font": ("Arial", 12, "bold"), "width": 12, "height": 1}

        self.boton_si = tk.Button(
            self.frame_botones, text="Sí", bg="#27ae60", fg="white",
            activebackground="#2ecc71", command=lambda: self.responder("sí"), **estilo_boton
        )
        self.boton_si.grid(row=0, column=0, padx=20)

        self.boton_no = tk.Button(
            self.frame_botones, text="No", bg="#c0392b", fg="white",
            activebackground="#e74c3c", command=lambda: self.responder("no"), **estilo_boton
        )
        self.boton_no.grid(row=0, column=1, padx=20)

        # Botón para mostrar lista de animales
        self.boton_lista = tk.Button(
            self.frame_botones, text="Ver lista de animales", bg="#2980b9", fg="white",
            activebackground="#3498db", font=("Arial", 10, "bold"), command=self.mostrar_animales
        )
        self.boton_lista.grid(row=1, column=0, columnspan=2, pady=10)

        # Evento de cierre
        self.root.protocol("WM_DELETE_WINDOW", self.cerrar_seguro)

        self.mostrar_pregunta()

    # ---------- Funciones ----------
    def mostrar_pregunta(self):
        if self.indice_pregunta < len(self.preguntas):
            self.label_pregunta.config(text=self.preguntas[self.indice_pregunta])
            self.label_progreso.config(
                text=f"Pregunta {self.indice_pregunta + 1} de {len(self.preguntas)}"
            )
            self.barra_progreso['value'] = self.indice_pregunta
        else:
            self.adivinar()

    def responder(self, respuesta):
        self.respuestas.append(respuesta)
        self.indice_pregunta += 1
        self.mostrar_pregunta()

    def adivinar(self):
        posibles = []
        for animal, respuestas in self.animales.items():
            if respuestas[:len(self.preguntas)] == self.respuestas:
                posibles.append(animal)

        if posibles:
            resultado = ", ".join(posibles)
            messagebox.showinfo("Resultado", f"Creo que tu animal es: {resultado}.")
            self.reiniciar()
        else:
            nuevo = simpledialog.askstring("Nuevo animal", "No lo adiviné. ¿Cuál era tu animal?")
            if nuevo:
                self.animales[nuevo.lower()] = self.respuestas
                guardar_base_datos(self.archivo, self.animales)
                messagebox.showinfo("Aprendido", f"He aprendido el animal '{nuevo}'.")
            self.reiniciar()

    def reiniciar(self):
        self.respuestas = []
        self.indice_pregunta = 0
        self.label_pregunta.config(text="Piensa en un nuevo animal...")
        self.label_progreso.config(text="")
        self.barra_progreso['value'] = 0
        self.root.after(1200, self.mostrar_pregunta)

    def mostrar_animales(self):
        if self.animales:
            lista = "\n".join(sorted(self.animales.keys()))
            messagebox.showinfo("Animales registrados", f"Lista de animales:\n{lista}")
        else:
            messagebox.showinfo("Animales registrados", "No hay animales en la base de datos.")

    def cerrar_seguro(self):
        guardar_base_datos(self.archivo, self.animales)
        self.root.destroy()


# ---------- Ejecutar ----------
if __name__ == "__main__":
    root = tk.Tk()
    app = AkinatorAnimales(root)
    root.mainloop()
